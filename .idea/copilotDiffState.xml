<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/GeradorDados.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/GeradorDados.java" />
              <option name="originalContent" value="import controle.*;&#10;import entidades.*;&#10;import java.time.LocalDate;&#10;&#10;public class GeradorDados {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Gerando arquivos .dat...&quot;);&#10;&#10;        try {&#10;            gerarClientes();&#10;            gerarEspacos();&#10;            gerarReservas();&#10;            System.out.println(&quot;Arquivos .dat criados com sucesso:&quot;);&#10;            System.out.println(&quot;- clientes.dat&quot;);&#10;            System.out.println(&quot;- espacos.dat&quot;);&#10;            System.out.println(&quot;- reservas.dat&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Erro: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private static void gerarClientes() throws Exception {&#10;        RepositorioClientes repo = new RepositorioClientes();&#10;        LocalDate hoje = LocalDate.now();&#10;&#10;        // Criando alguns clientes de exemplo&#10;        repo.adicionarCliente(new Cliente(&quot;12345678909&quot;, &quot;Felipe&quot;, &quot;felipe@email.com&quot;, &quot;(98) 91234-5678&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;23456789012&quot;, &quot;Raimundo&quot;, &quot;raimundo@email.com&quot;, &quot;(99) 92345-6789&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;34567890123&quot;, &quot;Messi&quot;, &quot;messi@email.com&quot;, &quot;(98) 93456-7890&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;45678901234&quot;, &quot;Noé&quot;, &quot;noe@email.com&quot;, &quot;(99) 94567-8901&quot;, hoje));&#10;&#10;        repo.salvarArquivo(&quot;clientes.dat&quot;);&#10;        System.out.println(&quot;4 clientes criados&quot;);&#10;    }&#10;&#10;    private static void gerarEspacos() throws Exception {&#10;        RepositorioEspacos repo = new RepositorioEspacos();&#10;&#10;        // Estacoes de Trabalho&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Messi 1&quot;, 15.0));&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Xavi 2&quot;, 15.0));&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Iniesta 3&quot;, 18.0));&#10;&#10;        // Salas Privadas&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada Alpha&quot;, 35.0));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada Cr7&quot;, 77.7));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada modric&quot;, 45.0));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Casemiro&quot;, 60.0));&#10;&#10;        // Salas de Reuniao&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Rai&quot;, 50.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Rogerio&quot;, 55.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Ceni&quot;, 65.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Kaka&quot;, 75.0));&#10;&#10;        // Auditorios&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Principal&quot;, 120.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Mirassol&quot;, 100.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio SP&quot;, 110.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Palmeiras&quot;, 150.0));&#10;&#10;        repo.salvarArquivo(&quot;espacos.dat&quot;);&#10;        System.out.println(&quot;16 espacos criados de todos os tipos&quot;);&#10;    }&#10;&#10;    private static void gerarReservas() throws Exception {&#10;        RepositorioReservas repo = new RepositorioReservas();&#10;&#10;        // Clientes de exemplo&#10;        Cliente cliente1 = new Cliente(&quot;12345678909&quot;, &quot;Felipe&quot;, &quot;felipe@email.com&quot;, &quot;(98) 91234-5678&quot;, LocalDate.now());&#10;        Cliente cliente2 = new Cliente(&quot;23456789012&quot;, &quot;Raimundo&quot;, &quot;raimundo@email.com&quot;, &quot;(99) 92345-6789&quot;, LocalDate.now());&#10;&#10;        // Espaços de exemplo - CORRIGIDO: usando espacos reais, nao servicos&#10;        Espaco espaco1 = new EstacaoTrabalho(&quot;Estacao Individual 1&quot;, 15.0);&#10;        Espaco espaco2 = new EstacaoTrabalho(&quot;Estacao Individual 2&quot;, 20.0);&#10;&#10;        // Criando reservas de exemplo&#10;        Reserva reserva1 = new Reserva(cliente1, espaco1,&#10;                LocalDate.now().plusDays(1),&#10;                java.time.LocalTime.of(9, 0),&#10;                java.time.LocalTime.of(12, 0));&#10;&#10;        Reserva reserva2 = new Reserva(cliente2, espaco2,&#10;                LocalDate.now().plusDays(2),&#10;                java.time.LocalTime.of(14, 0),&#10;                java.time.LocalTime.of(18, 0));&#10;&#10;        // Adicionando servicos extras nas reservas&#10;        reserva1.adicionarServico(new CafePremium(3, 5.50));&#10;        reserva2.adicionarServico(new Locker(1, 10.0));&#10;&#10;        repo.adicionarReserva(reserva1);&#10;        repo.adicionarReserva(reserva2);&#10;        repo.salvarArquivo(&quot;reservas.dat&quot;);&#10;&#10;        System.out.println(&quot;2 reservas criadas&quot;);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="import controle.*;&#10;import entidades.*;&#10;import java.time.LocalDate;&#10;&#10;public class GeradorDados {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Gerando arquivos .dat...&quot;);&#10;&#10;        try {&#10;            gerarClientes();&#10;            gerarEspacos();&#10;            gerarReservas();&#10;            System.out.println(&quot;Arquivos .dat criados com sucesso:&quot;);&#10;            System.out.println(&quot;- clientes.dat&quot;);&#10;            System.out.println(&quot;- espacos.dat&quot;);&#10;            System.out.println(&quot;- reservas.dat&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Erro: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private static void gerarClientes() throws Exception {&#10;        RepositorioClientes repo = new RepositorioClientes();&#10;        LocalDate hoje = LocalDate.now();&#10;&#10;        // Criando alguns clientes de exemplo&#10;        repo.adicionarCliente(new Cliente(&quot;12345678909&quot;, &quot;Felipe&quot;, &quot;felipe@email.com&quot;, &quot;(98) 91234-5678&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;23456789012&quot;, &quot;Raimundo&quot;, &quot;raimundo@email.com&quot;, &quot;(99) 92345-6789&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;34567890123&quot;, &quot;Messi&quot;, &quot;messi@email.com&quot;, &quot;(98) 93456-7890&quot;, hoje));&#10;        repo.adicionarCliente(new Cliente(&quot;45678901234&quot;, &quot;Noé&quot;, &quot;noe@email.com&quot;, &quot;(99) 94567-8901&quot;, hoje));&#10;&#10;        repo.salvarArquivo(&quot;clientes.dat&quot;);&#10;        System.out.println(&quot;4 clientes criados&quot;);&#10;    }&#10;&#10;    private static void gerarEspacos() throws Exception {&#10;        RepositorioEspacos repo = new RepositorioEspacos();&#10;&#10;        // Estacoes de Trabalho&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Messi 1&quot;, 15.0));&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Xavi 2&quot;, 15.0));&#10;        repo.adicionarEspaco(new EstacaoTrabalho(&quot;Estacao Iniesta 3&quot;, 18.0));&#10;&#10;        // Salas Privadas&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada Alpha&quot;, 35.0));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada Cr7&quot;, 77.7));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Privada modric&quot;, 45.0));&#10;        repo.adicionarEspaco(new SalaPrivada(&quot;Sala Casemiro&quot;, 60.0));&#10;&#10;        // Salas de Reuniao&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Rai&quot;, 50.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Rogerio&quot;, 55.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Ceni&quot;, 65.0));&#10;        repo.adicionarEspaco(new SalaReuniao(&quot;Sala Reuniao Kaka&quot;, 75.0));&#10;&#10;        // Auditorios&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Principal&quot;, 120.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Mirassol&quot;, 100.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio SP&quot;, 110.0));&#10;        repo.adicionarEspaco(new Auditorio(&quot;Auditorio Palmeiras&quot;, 150.0));&#10;&#10;        repo.salvarArquivo(&quot;espacos.dat&quot;);&#10;        System.out.println(&quot;16 espacos criados de todos os tipos&quot;);&#10;    }&#10;&#10;    private static void gerarReservas() throws Exception {&#10;        RepositorioReservas repo = new RepositorioReservas();&#10;&#10;        // Clientes de exemplo&#10;        Cliente cliente1 = new Cliente(&quot;12345678909&quot;, &quot;Felipe&quot;, &quot;felipe@email.com&quot;, &quot;(98) 91234-5678&quot;, LocalDate.now());&#10;        Cliente cliente2 = new Cliente(&quot;23456789012&quot;, &quot;Raimundo&quot;, &quot;raimundo@email.com&quot;, &quot;(99) 92345-6789&quot;, LocalDate.now());&#10;        Cliente cliente3 = new Cliente(&quot;34567890123&quot;, &quot;Messi&quot;, &quot;messi@email.com&quot;, &quot;(98) 93456-7890&quot;, LocalDate.now());&#10;        Cliente cliente4 = new Cliente(&quot;45678901234&quot;, &quot;Noé&quot;, &quot;noe@email.com&quot;, &quot;(99) 94567-8901&quot;, LocalDate.now());&#10;&#10;        // Espaços de exemplo&#10;        Espaco espaco1 = new EstacaoTrabalho(&quot;Estacao Individual 1&quot;, 15.0);&#10;        Espaco espaco2 = new SalaPrivada(&quot;Sala Privada Cr7&quot;, 77.7);&#10;        Espaco espaco3 = new SalaReuniao(&quot;Sala Reuniao Rai&quot;, 50.0);&#10;        Espaco espaco4 = new Auditorio(&quot;Auditorio Principal&quot;, 120.0);&#10;&#10;        // Criando reservas de exemplo&#10;        Reserva reserva1 = new Reserva(cliente1, espaco1,&#10;                LocalDate.now().plusDays(1),&#10;                java.time.LocalTime.of(9, 0),&#10;                java.time.LocalTime.of(12, 0));&#10;&#10;        Reserva reserva2 = new Reserva(cliente2, espaco2,&#10;                LocalDate.now().plusDays(2),&#10;                java.time.LocalTime.of(14, 0),&#10;                java.time.LocalTime.of(18, 0));&#10;&#10;        Reserva reserva3 = new Reserva(cliente3, espaco3,&#10;                LocalDate.now().plusDays(3),&#10;                java.time.LocalTime.of(8, 0),&#10;                java.time.LocalTime.of(17, 0));&#10;&#10;        Reserva reserva4 = new Reserva(cliente4, espaco4,&#10;                LocalDate.now().plusDays(4),&#10;                java.time.LocalTime.of(10, 0),&#10;                java.time.LocalTime.of(16, 0));&#10;&#10;        // Adicionando TODOS os tipos de servicos extras nas reservas&#10;        reserva1.adicionarServico(new CafePremium(3, 5.50));&#10;        reserva1.adicionarServico(new Estacionamento(3, 8.0));&#10;&#10;        reserva2.adicionarServico(new Locker(1, 10.0));&#10;        reserva2.adicionarServico(new RecebimentoCorrespondencia(2, 3.0));&#10;&#10;        reserva3.adicionarServico(new CafePremium(5, 5.50));&#10;        reserva3.adicionarServico(new Estacionamento(9, 8.0));&#10;        reserva3.adicionarServico(new Locker(1, 10.0));&#10;&#10;        reserva4.adicionarServico(new CafePremium(2, 5.50));&#10;        reserva4.adicionarServico(new Estacionamento(6, 8.0));&#10;        reserva4.adicionarServico(new Locker(2, 10.0));&#10;        reserva4.adicionarServico(new RecebimentoCorrespondencia(1, 3.0));&#10;&#10;        repo.adicionarReserva(reserva1);&#10;        repo.adicionarReserva(reserva2);&#10;        repo.adicionarReserva(reserva3);&#10;        repo.adicionarReserva(reserva4);&#10;        repo.salvarArquivo(&quot;reservas.dat&quot;);&#10;&#10;        System.out.println(&quot;4 reservas criadas com todos os tipos de servicos&quot;);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/controle/AdministradorSistema.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/controle/AdministradorSistema.java" />
              <option name="originalContent" value="package controle;&#10;&#10;import entidades.Cliente;&#10;import entidades.Espaco;&#10;import entidades.Reserva;&#10;import entidades.ServicoAdicional;&#10;import excecoes.*;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.ArrayList;&#10;&#10;public class AdministradorSistema implements Serializable {&#10;    private RepositorioClientes repositorioClientes = new RepositorioClientes();&#10;    private RepositorioEspacos repositorioEspacos = new RepositorioEspacos();&#10;    private RepositorioReservas repositorioReservas = new RepositorioReservas();&#10;&#10;    public AdministradorSistema() {}&#10;&#10;    public void cadastrarCliente(Cliente cliente) throws ClienteJaCadastradoException {&#10;        Cliente clienteExistente = repositorioClientes.buscarCliente(cliente.getCpf());&#10;        if (clienteExistente != null) {&#10;            throw new ClienteJaCadastradoException(&quot;Cliente ja cadastrado com este CPF.&quot;);&#10;        }&#10;        repositorioClientes.adicionarCliente(cliente);&#10;    }&#10;&#10;    public Cliente buscarCliente(String cpf) throws ClienteNaoEncontradoException {&#10;        Cliente cliente = repositorioClientes.buscarCliente(cpf);&#10;        if (cliente == null) {&#10;            throw new ClienteNaoEncontradoException(&quot;Cliente nao encontrado.&quot;);&#10;        }&#10;        return cliente;&#10;    }&#10;&#10;    public void removerCliente(String cpf) throws ClienteNaoEncontradoException {&#10;        Cliente cliente = repositorioClientes.buscarCliente(cpf);&#10;        if (cliente == null) {&#10;            throw new ClienteNaoEncontradoException(&quot;Cliente nao encontrado.&quot;);&#10;        }&#10;        repositorioClientes.removerCliente(cpf);&#10;    }&#10;&#10;    public Map&lt;String, Cliente&gt; listarClientes() {&#10;        return repositorioClientes.listarClientes();&#10;    }&#10;&#10;    public void cadastrarEspaco(Espaco espaco) {&#10;        repositorioEspacos.adicionarEspaco(espaco);&#10;    }&#10;&#10;    public Espaco buscarEspaco(String id) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(id);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado.&quot;);&#10;        }&#10;        return espaco;&#10;    }&#10;&#10;    public void removerEspaco(String id) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(id);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado.&quot;);&#10;        }&#10;        repositorioEspacos.removerEspaco(id);&#10;    }&#10;&#10;    public Map&lt;String, Espaco&gt; listarEspacos() {&#10;        return repositorioEspacos.listarEspacos();&#10;    }&#10;&#10;    public void cadastrarReserva(Reserva reserva) throws EspacoIndisponivelException {&#10;        String idEspaco = reserva.getEspaco().getId();&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(idEspaco);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado.&quot;);&#10;        }&#10;        repositorioReservas.adicionarReserva(reserva);&#10;    }&#10;&#10;    public boolean verificarDisponibilidade(String espacoId, java.time.LocalDate data, java.time.LocalTime inicio, java.time.LocalTime fim) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(espacoId);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado.&quot;);&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public Reserva buscarReserva(String id) throws ReservaNaoEncontradaException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(id);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada.&quot;);&#10;        }&#10;        return reserva;&#10;    }&#10;&#10;    public void removerReserva(String id) throws ReservaNaoEncontradaException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(id);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada.&quot;);&#10;        }&#10;        repositorioReservas.removerReserva(id);&#10;    }&#10;&#10;    public Map&lt;String, Reserva&gt; listarReservas() {&#10;        return repositorioReservas.listarReservas();&#10;    }&#10;&#10;    public void adicionarServicoAReserva(String reservaId, ServicoAdicional servico) throws ReservaNaoEncontradaException, ServicoInvalidoException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(reservaId);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada.&quot;);&#10;        }&#10;        if (servico == null) {&#10;            throw new ServicoInvalidoException(&quot;Servico invalido.&quot;);&#10;        }&#10;        reserva.adicionarServico(servico);&#10;    }&#10;&#10;    public void salvarTudo() throws FalhaPersistenciaException {&#10;        repositorioClientes.salvarArquivo(&quot;clientes.dat&quot;);&#10;        repositorioEspacos.salvarArquivo(&quot;espacos.dat&quot;);&#10;        repositorioReservas.salvarArquivo(&quot;reservas.dat&quot;);&#10;    }&#10;&#10;    public void carregarTudo() throws FalhaPersistenciaException {&#10;        repositorioClientes.carregarArquivo(&quot;clientes.dat&quot;);&#10;        repositorioEspacos.carregarArquivo(&quot;espacos.dat&quot;);&#10;        repositorioReservas.carregarArquivo(&quot;reservas.dat&quot;);&#10;    }&#10;&#10;    public List&lt;Reserva&gt; reservasPorCliente(String cpf) {&#10;        List&lt;Reserva&gt; reservasDoCliente = new ArrayList&lt;&gt;();&#10;        Map&lt;String, Reserva&gt; todasReservas = repositorioReservas.listarReservas();&#10;        for (Reserva reserva : todasReservas.values()) {&#10;            if (reserva.getCliente().getCpf().equals(cpf)) {&#10;                reservasDoCliente.add(reserva);&#10;            }&#10;        }&#10;&#10;        return reservasDoCliente;&#10;    }&#10;}" />
              <option name="updatedContent" value="package controle;&#10;&#10;import entidades.Cliente;&#10;import entidades.Espaco;&#10;import entidades.Reserva;&#10;import entidades.ServicoAdicional;&#10;import excecoes.*;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.ArrayList;&#10;&#10;public class AdministradorSistema implements Serializable {&#10;    private RepositorioClientes repositorioClientes = new RepositorioClientes();&#10;    private RepositorioEspacos repositorioEspacos = new RepositorioEspacos();&#10;    private RepositorioReservas repositorioReservas = new RepositorioReservas();&#10;&#10;    public AdministradorSistema() {}&#10;&#10;    public void cadastrarCliente(Cliente cliente) throws ClienteJaCadastradoException {&#10;        Cliente clienteExistente = repositorioClientes.buscarCliente(cliente.getCpf());&#10;        if (clienteExistente != null) {&#10;            throw new ClienteJaCadastradoException(&quot;Cliente ja cadastrado com este CPF&quot;);&#10;        }&#10;        repositorioClientes.adicionarCliente(cliente);&#10;    }&#10;&#10;    public Cliente buscarCliente(String cpf) throws ClienteNaoEncontradoException {&#10;        Cliente cliente = repositorioClientes.buscarCliente(cpf);&#10;        if (cliente == null) {&#10;            throw new ClienteNaoEncontradoException(&quot;Cliente nao encontrado&quot;);&#10;        }&#10;        return cliente;&#10;    }&#10;&#10;    public void removerCliente(String cpf) throws ClienteNaoEncontradoException {&#10;        Cliente cliente = repositorioClientes.buscarCliente(cpf);&#10;        if (cliente == null) {&#10;            throw new ClienteNaoEncontradoException(&quot;Cliente nao encontrado&quot;);&#10;        }&#10;        repositorioClientes.removerCliente(cpf);&#10;    }&#10;&#10;    public Map&lt;String, Cliente&gt; listarClientes() {&#10;        return repositorioClientes.listarClientes();&#10;    }&#10;&#10;    public void cadastrarEspaco(Espaco espaco) {&#10;        repositorioEspacos.adicionarEspaco(espaco);&#10;    }&#10;&#10;    public Espaco buscarEspaco(String id) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(id);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado&quot;);&#10;        }&#10;        return espaco;&#10;    }&#10;&#10;    public void removerEspaco(String id) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(id);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado&quot;);&#10;        }&#10;        repositorioEspacos.removerEspaco(id);&#10;    }&#10;&#10;    public Map&lt;String, Espaco&gt; listarEspacos() {&#10;        return repositorioEspacos.listarEspacos();&#10;    }&#10;&#10;    public void cadastrarReserva(Reserva reserva) throws EspacoIndisponivelException {&#10;        String idEspaco = reserva.getEspaco().getId();&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(idEspaco);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado&quot;);&#10;        }&#10;        repositorioReservas.adicionarReserva(reserva);&#10;    }&#10;&#10;    public boolean verificarDisponibilidade(String espacoId, java.time.LocalDate data, java.time.LocalTime inicio, java.time.LocalTime fim) throws EspacoIndisponivelException {&#10;        Espaco espaco = repositorioEspacos.buscarEspaco(espacoId);&#10;        if (espaco == null) {&#10;            throw new EspacoIndisponivelException(&quot;Espaco nao encontrado&quot;);&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public Reserva buscarReserva(String id) throws ReservaNaoEncontradaException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(id);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada&quot;);&#10;        }&#10;        return reserva;&#10;    }&#10;&#10;    public void removerReserva(String id) throws ReservaNaoEncontradaException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(id);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada&quot;);&#10;        }&#10;        repositorioReservas.removerReserva(id);&#10;    }&#10;&#10;    public Map&lt;String, Reserva&gt; listarReservas() {&#10;        return repositorioReservas.listarReservas();&#10;    }&#10;&#10;    public void adicionarServicoAReserva(String reservaId, ServicoAdicional servico) throws ReservaNaoEncontradaException, ServicoInvalidoException {&#10;        Reserva reserva = repositorioReservas.buscarReserva(reservaId);&#10;        if (reserva == null) {&#10;            throw new ReservaNaoEncontradaException(&quot;Reserva nao encontrada&quot;);&#10;        }&#10;        if (servico == null) {&#10;            throw new ServicoInvalidoException(&quot;Servico invalido&quot;);&#10;        }&#10;        reserva.adicionarServico(servico);&#10;    }&#10;&#10;    public void salvarTudo() throws FalhaPersistenciaException {&#10;        repositorioClientes.salvarArquivo(&quot;clientes.dat&quot;);&#10;        repositorioEspacos.salvarArquivo(&quot;espacos.dat&quot;);&#10;        repositorioReservas.salvarArquivo(&quot;reservas.dat&quot;);&#10;    }&#10;&#10;    public void carregarTudo() throws FalhaPersistenciaException {&#10;        repositorioClientes.carregarArquivo(&quot;clientes.dat&quot;);&#10;        repositorioEspacos.carregarArquivo(&quot;espacos.dat&quot;);&#10;        repositorioReservas.carregarArquivo(&quot;reservas.dat&quot;);&#10;    }&#10;&#10;    public List&lt;Reserva&gt; reservasPorCliente(String cpf) {&#10;        List&lt;Reserva&gt; reservasDoCliente = new ArrayList&lt;&gt;();&#10;        Map&lt;String, Reserva&gt; todasReservas = repositorioReservas.listarReservas();&#10;        for (Reserva reserva : todasReservas.values()) {&#10;            if (reserva.getCliente().getCpf().equals(cpf)) {&#10;                reservasDoCliente.add(reserva);&#10;            }&#10;        }&#10;&#10;        return reservasDoCliente;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/entidades/Reserva.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/entidades/Reserva.java" />
              <option name="originalContent" value="package entidades;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Reserva implements Serializable {&#10;    private String id;&#10;    private Cliente cliente;&#10;    private Espaco espaco;&#10;    private LocalDate data;&#10;    private LocalTime horaInicio;&#10;    private LocalTime horaFim;&#10;    private List&lt;ServicoAdicional&gt; servicosAdicionais;&#10;&#10;    public Reserva(Cliente cliente, Espaco espaco, LocalDate data, LocalTime horaInicio, LocalTime horaFim) {&#10;        // Cria um ID unico usando o tempo atual&#10;        this.id = &quot;RE&quot; + System.currentTimeMillis();&#10;        this.cliente = cliente;&#10;        this.espaco = espaco;&#10;        this.data = data;&#10;        this.horaInicio = horaInicio;&#10;        this.horaFim = horaFim;&#10;        // Cria uma lista vazia para os servicos extras&#10;        this.servicosAdicionais = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public Cliente getCliente() {&#10;        return cliente;&#10;    }&#10;&#10;    public void setCliente(Cliente cliente) {&#10;        this.cliente = cliente;&#10;    }&#10;&#10;    public Espaco getEspaco() {&#10;        return espaco;&#10;    }&#10;&#10;    public void setEspaco(Espaco espaco) {&#10;        this.espaco = espaco;&#10;    }&#10;&#10;    public LocalDate getData() {&#10;        return data;&#10;    }&#10;&#10;    public void setData(LocalDate data) {&#10;        this.data = data;&#10;    }&#10;&#10;    public LocalTime getHoraInicio() {&#10;        return horaInicio;&#10;    }&#10;&#10;    public void setHoraInicio(LocalTime horaInicio) {&#10;        this.horaInicio = horaInicio;&#10;    }&#10;&#10;    public LocalTime getHoraFim() {&#10;        return horaFim;&#10;    }&#10;&#10;    public void setHoraFim(LocalTime horaFim) {&#10;        this.horaFim = horaFim;&#10;    }&#10;&#10;    public List&lt;ServicoAdicional&gt; getServicosAdicionais() {&#10;        return servicosAdicionais;&#10;    }&#10;&#10;    // ========== METODOS PARA SERVICOS EXTRAS ==========&#10;&#10;    public void adicionarServico(ServicoAdicional servico) {&#10;        this.servicosAdicionais.add(servico);&#10;    }&#10;&#10;    public void removerServico(ServicoAdicional servico) {&#10;        this.servicosAdicionais.remove(servico);&#10;    }&#10;&#10;    // ========== CALCULO DO VALOR TOTAL ==========&#10;&#10;    /**&#10;     * Calcula quanto a pessoa vai pagar no total&#10;     * Soma o valor do espaco + servicos extras&#10;     */&#10;    public double calcularValorTotal() {&#10;        // Primeiro calcula quantas horas a pessoa vai usar o espaco&#10;        int horasReservadas = calcularHorasDeUso();&#10;&#10;        // Multiplica as horas pelo valor por hora do espaco&#10;        double valorEspaco = horasReservadas * espaco.getValorHora();&#10;&#10;        // Soma o valor de todos os servicos extras&#10;        double valorServicos = calcularValorServicos();&#10;&#10;        // Valor total = espaco + servicos&#10;        return valorEspaco + valorServicos;&#10;    }&#10;&#10;    /**&#10;     * Calcula quantas horas a pessoa vai usar o espaco&#10;     * Metodo mais simples que um iniciante entenderia&#10;     */&#10;    private int calcularHorasDeUso() {&#10;        // Pega a hora de inicio (ex: 9)&#10;        int horaInicial = horaInicio.getHour();&#10;&#10;        // Pega a hora de fim (ex: 12)&#10;        int horaFinal = horaFim.getHour();&#10;&#10;        // Calcula a diferenca (ex: 12 - 9 = 3 horas)&#10;        int horas = horaFinal - horaInicial;&#10;&#10;        // Se der numero negativo ou zero, considera pelo menos 1 hora&#10;        if (horas &lt;= 0) {&#10;            horas = 1;&#10;        }&#10;&#10;        return horas;&#10;    }&#10;&#10;    /**&#10;     * Soma o valor de todos os servicos extras&#10;     */&#10;    private double calcularValorServicos() {&#10;        double total = 0.0;&#10;&#10;        // Percorre todos os servicos e soma os valores&#10;        for (ServicoAdicional servico : servicosAdicionais) {&#10;            total = total + servico.getValorTotal();&#10;        }&#10;&#10;        return total;&#10;    }&#10;&#10;    /**&#10;     * Mostra as informacoes da reserva de forma organizada&#10;     */&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reserva{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, cliente=&quot; + cliente.getNome() +&#10;                &quot;, espaco=&quot; + espaco.getNome() +&#10;                &quot;, data=&quot; + data +&#10;                &quot;, horaInicio=&quot; + horaInicio +&#10;                &quot;, horaFim=&quot; + horaFim +&#10;                &quot;, valorTotal=&quot; + calcularValorTotal() +&#10;                '}';&#10;    }&#10;}" />
              <option name="updatedContent" value="package entidades;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Reserva implements Serializable {&#10;    private String id;&#10;    private Cliente cliente;&#10;    private Espaco espaco;&#10;    private LocalDate data;&#10;    private LocalTime horaInicio;&#10;    private LocalTime horaFim;&#10;    private List&lt;ServicoAdicional&gt; servicosAdicionais;&#10;&#10;    public Reserva(Cliente cliente, Espaco espaco, LocalDate data, LocalTime horaInicio, LocalTime horaFim) {&#10;        this.id = &quot;RE&quot; + System.currentTimeMillis();&#10;        this.cliente = cliente;&#10;        this.espaco = espaco;&#10;        this.data = data;&#10;        this.horaInicio = horaInicio;&#10;        this.horaFim = horaFim;&#10;        this.servicosAdicionais = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public Cliente getCliente() {&#10;        return cliente;&#10;    }&#10;&#10;    public void setCliente(Cliente cliente) {&#10;        this.cliente = cliente;&#10;    }&#10;&#10;    public Espaco getEspaco() {&#10;        return espaco;&#10;    }&#10;&#10;    public void setEspaco(Espaco espaco) {&#10;        this.espaco = espaco;&#10;    }&#10;&#10;    public LocalDate getData() {&#10;        return data;&#10;    }&#10;&#10;    public void setData(LocalDate data) {&#10;        this.data = data;&#10;    }&#10;&#10;    public LocalTime getHoraInicio() {&#10;        return horaInicio;&#10;    }&#10;&#10;    public void setHoraInicio(LocalTime horaInicio) {&#10;        this.horaInicio = horaInicio;&#10;    }&#10;&#10;    public LocalTime getHoraFim() {&#10;        return horaFim;&#10;    }&#10;&#10;    public void setHoraFim(LocalTime horaFim) {&#10;        this.horaFim = horaFim;&#10;    }&#10;&#10;    public List&lt;ServicoAdicional&gt; getServicosAdicionais() {&#10;        return servicosAdicionais;&#10;    }&#10;&#10;    public void adicionarServico(ServicoAdicional servico) {&#10;        this.servicosAdicionais.add(servico);&#10;    }&#10;&#10;    public void removerServico(ServicoAdicional servico) {&#10;        this.servicosAdicionais.remove(servico);&#10;    }&#10;&#10;    public double calcularValorTotal() {&#10;        int horasReservadas = calcularHorasDeUso();&#10;        double valorEspaco = horasReservadas * espaco.getValorHora();&#10;        double valorServicos = calcularValorServicos();&#10;        return valorEspaco + valorServicos;&#10;    }&#10;&#10;    private int calcularHorasDeUso() {&#10;        int horaInicial = horaInicio.getHour();&#10;        int horaFinal = horaFim.getHour();&#10;        int horas = horaFinal - horaInicial;&#10;        if (horas &lt;= 0) {&#10;            horas = 1;&#10;        }&#10;        return horas;&#10;    }&#10;&#10;    private double calcularValorServicos() {&#10;        double total = 0.0;&#10;        for (ServicoAdicional servico : servicosAdicionais) {&#10;            total = total + servico.getValorTotal();&#10;        }&#10;        return total;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reserva{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, cliente=&quot; + cliente.getNome() +&#10;                &quot;, espaco=&quot; + espaco.getNome() +&#10;                &quot;, data=&quot; + data +&#10;                &quot;, horaInicio=&quot; + horaInicio +&#10;                &quot;, horaFim=&quot; + horaFim +&#10;                &quot;, valorTotal=&quot; + calcularValorTotal() +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>